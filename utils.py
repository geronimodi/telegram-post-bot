import sys
import os
import shutil
import random
import logging
import configparser  #  –î–æ–±–∞–≤–ª—è–µ–º configparser —Å—é–¥–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

#  –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∏–º–µ–Ω–∞, –±–µ–∑ –ø—É—Ç–µ–π)
LAST_POST_TIME_FILE_NAME = "last_post_time.json"
PHRASES_FILE_NAME = "phrases.txt"
CONFIG_FILE_NAME = "config.ini"

EMOJIS = ["üçÜ", "üí¶", "üî•", "üòè", "‚ú®", "ü§ó", "üé®", "üëá"]

def resource_path(relative_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è PyInstaller, –∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
    """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(os.path.dirname(__file__))
    return os.path.join(base_path, relative_path)

def get_app_data_path(filename):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ AppData. –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    """
    app_data_dir = os.path.join(os.path.expanduser("~"), "AppData", "Local", "TelegramBot") # –ú–æ–∂–Ω–æ Roaming, –≤–º–µ—Å—Ç–æ Local
    if not os.path.exists(app_data_dir):
        os.makedirs(app_data_dir)
    return os.path.join(app_data_dir, filename)

def check_disk_space(path, required_space_mb=10):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ."""
    try:
        disk_usage = shutil.disk_usage(path)
        free_space_mb = disk_usage.free / (1024 * 1024)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ–≥–∞–±–∞–π—Ç—ã
        return free_space_mb >= required_space_mb
    except Exception:
        return False

def generate_phrase_with_emoji(phrases):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏."""
    phrase = random.choice(phrases)
    num_emojis = random.randint(1, 3)
    emojis = random.choices(EMOJIS, k=num_emojis)
    return phrase + " " + "".join(emojis)

def load_phrases(filename=PHRASES_FILE_NAME):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ—Ä–∞–∑—ã.
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ AppData,
    –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    app_data_file = get_app_data_path(filename)
    phrases = []

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ AppData
    if os.path.exists(app_data_file):
        try:
            with open(app_data_file, "r", encoding="utf-8") as f:
                for line in f:
                    phrases.append(line.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ—Ä–∞–∑ –∏–∑ AppData: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤

    # –ï—Å–ª–∏ –≤ AppData —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≥—Ä—É–∑–∏–º –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
    if not phrases:
        try:
            with open(resource_path(filename), "r", encoding="utf-8") as f:
                for line in f:
                    phrases.append(line.strip())
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏ '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∏ –≤ AppData, –Ω–∏ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö)!")
            return ["–í–æ—Ç —ç—Ç–æ –¥–∞!...", "–®–∏–∫–∞—Ä–Ω–æ!..", "–û–≥–æ–Ω—å! üî•"]  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã

    return phrases


def save_phrases(phrases, filename=PHRASES_FILE_NAME):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∞–∑—ã –≤ AppData."""
    app_data_file = get_app_data_path(filename)
    if not check_disk_space(os.path.dirname(app_data_file)):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑.")
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞
    try:
        with open(app_data_file, "w", encoding="utf-8") as f:
            for phrase in phrases:
                f.write(phrase + "\n")
        logger.info("–§—Ä–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑: {e}")