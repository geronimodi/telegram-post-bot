import asyncio
import os
import logging

import telegram
from telegram.ext import Application, AIORateLimiter
from telegram.error import TelegramError

from utils import generate_phrase_with_emoji, check_disk_space, load_phrases
from PyQt6.QtCore import Qt, QMetaObject, Q_ARG # –î–æ–±–∞–≤–∏—Ç—å!

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def send_telegram_post(bot_token, channel_id, file_paths, gui_instance):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Telegram."""
    app = Application.builder().token(bot_token).rate_limiter(AIORateLimiter()).build()

    try:
        phrases = load_phrases()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã
        text = generate_phrase_with_emoji(phrases) + "\n\n" + gui_instance.settings.get("DEFAULT_HASHTAGS", "")

        media_group = []
        total_files = len(file_paths) # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        for i, file_path in enumerate(file_paths):  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
            _, ext = os.path.splitext(file_path)
            ext = ext.lower()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–ª—ã–π/—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É, —Ç.–∫. –≤—ã–∑—ã–≤–∞–µ–º –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è)
            whitelist = [e.strip().lower() for e in gui_instance.settings.get("WHITELIST_EXTENSIONS", ".jpg,.jpeg,.png,.gif,.mp4").split(",")]
            blacklist = [e.strip().lower() for e in gui_instance.settings.get("BLACKLIST_EXTENSIONS", "").split(",")]

            if (whitelist and ext not in whitelist) or (blacklist and ext in blacklist):
                gui_instance.log_output.append(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π).")
                continue

            try:
                if ext in (".jpg", ".jpeg", ".png"):
                    with open(file_path, "rb") as file:
                        media_group.append(telegram.InputMediaPhoto(file))
                elif ext == ".mp4":
                    with open(file_path, "rb") as file:
                        media_group.append(telegram.InputMediaVideo(file))
                else:
                    gui_instance.log_output.append(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
            except FileNotFoundError:
                gui_instance.log_output.append(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            except OSError as e:
                gui_instance.log_output.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {file_path}. {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä *–ø–æ—Å–ª–µ* –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ media_group
            progress_value = int(((i + 1) / total_files) * 100)  # +1, —Ç.–∫. –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º QMetaObject.invokeMethod, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ
            QMetaObject.invokeMethod(gui_instance.progress_bar, "setValue", Qt.ConnectionType.QueuedConnection, Q_ARG(int, progress_value))

        if not media_group:
            gui_instance.log_output.append("‚ùå –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        attempt = 0
        success = False

        while attempt < max_attempts and not success:
            attempt += 1
            try:
                if len(media_group) > 10:
                    gui_instance.log_output.append("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏.")
                    for i in range(0, len(media_group), 10):
                        chunk = media_group[i:i + 10]
                        #  –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã:
                        await app.bot.send_media_group(channel_id, chunk, caption=text if i == 0 else None, read_timeout=60, write_timeout=60, connect_timeout=60)
                        QMetaObject.invokeMethod(
                            gui_instance.log_output, "append", Qt.ConnectionType.QueuedConnection,
                            Q_ARG(str, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i // 10 + 1} –ø–æ—Å—Ç–∞.")
                        )
                        await asyncio.sleep(30)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                else:
                    #  –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã:
                    await app.bot.send_media_group(channel_id, media_group, caption=text, read_timeout=60, write_timeout=60, connect_timeout=60)
                    QMetaObject.invokeMethod(
                        gui_instance.log_output, "append", Qt.ConnectionType.QueuedConnection,
                        Q_ARG(str, "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                    )

                success = True  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏

            except telegram.error.TimedOut:
                gui_instance.log_output.append(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: –¢–∞–π–º–∞—É—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}.")
                await asyncio.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            except TelegramError as e:
                gui_instance.log_output.append(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö Telegram API

        if success:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã *—Ç–æ–ª—å–∫–æ* –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π
            for file_path in file_paths:
                try:
                    if os.path.exists(file_path):
                        await asyncio.to_thread(os.remove, file_path)
                        QMetaObject.invokeMethod(
                            gui_instance.log_output, "append", Qt.ConnectionType.QueuedConnection,
                            Q_ARG(str, f"üóëÔ∏è –§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω.")
                        )
                    else:
                        QMetaObject.invokeMethod(
                            gui_instance.log_output, "append", Qt.ConnectionType.QueuedConnection,
                            Q_ARG(str, f"‚ö†Ô∏è –§–∞–π–ª {file_path} —É–∂–µ —É–¥–∞–ª—ë–Ω.")
                        )
                except Exception as e:
                    QMetaObject.invokeMethod(
                        gui_instance.log_output, "append", Qt.ConnectionType.QueuedConnection,
                        Q_ARG(str, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            QMetaObject.invokeMethod(gui_instance.progress_bar, "setValue", Qt.ConnectionType.QueuedConnection, Q_ARG(int, 0))

        else:
            gui_instance.log_output.append("‚ùå –ü–æ—Å—Ç –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    except Exception as e:  # –û–±—â–∏–π Exception –≤ –∫–æ–Ω—Ü–µ
        gui_instance.log_output.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_post: {e}")
        #  –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:
        QMetaObject.invokeMethod(gui_instance.progress_bar, "setValue", Qt.ConnectionType.QueuedConnection, Q_ARG(int, 0))

async def start_telegram_bot(bot_token, gui_instance):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    app = Application.builder().token(bot_token).rate_limiter(AIORateLimiter()).build()
    try:
        me = await app.bot.get_me()
        gui_instance.log_output.append(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.  –ò–º—è –±–æ—Ç–∞: {me.username}")
        gui_instance.set_bot_running(True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

    except TelegramError as e:
        gui_instance.log_output.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        gui_instance.show_settings_dialog()

async def stop_telegram_bot(gui_instance):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
    gui_instance.set_bot_running(False)
    gui_instance.log_output.append("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")